name: DevSecOps Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security Scanning Phase
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Code Quality and Security Analysis
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-and-quality

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"

    # Dependency Vulnerability Scanning
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies for API Gateway
      run: |
        cd api-gateway
        npm ci
      working-directory: ${{ github.workspace }}

    - name: Install dependencies for User Service
      run: |
        cd user-service
        npm ci
      working-directory: ${{ github.workspace }}

    - name: Install dependencies for Order Service
      run: |
        cd order-service
        npm ci
      working-directory: ${{ github.workspace }}

    - name: Install dependencies for Inventory Service
      run: |
        cd inventory-service
        npm ci
      working-directory: ${{ github.workspace }}

    - name: Install dependencies for Notification Service
      run: |
        cd notification-service
        npm ci
      working-directory: ${{ github.workspace }}

    - name: Install dependencies for Frontend
      run: |
        cd frontend
        npm ci
      working-directory: ${{ github.workspace }}

    - name: Run npm audit for API Gateway
      run: |
        cd api-gateway
        npm audit --audit-level=high
      working-directory: ${{ github.workspace }}

    - name: Run npm audit for User Service
      run: |
        cd user-service
        npm audit --audit-level=high
      working-directory: ${{ github.workspace }}

    - name: Run npm audit for Order Service
      run: |
        cd order-service
        npm audit --audit-level=high
      working-directory: ${{ github.workspace }}

    - name: Run npm audit for Inventory Service
      run: |
        cd inventory-service
        npm audit --audit-level=high
      working-directory: ${{ github.workspace }}

    - name: Run npm audit for Notification Service
      run: |
        cd notification-service
        npm audit --audit-level=high
      working-directory: ${{ github.workspace }}

    - name: Run npm audit for Frontend
      run: |
        cd frontend
        npm audit --audit-level=high
      working-directory: ${{ github.workspace }}

  # Container Image Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker images
      run: |
        docker build -t api-gateway:latest ./api-gateway
        docker build -t user-service:latest ./user-service
        docker build -t order-service:latest ./order-service
        docker build -t inventory-service:latest ./inventory-service
        docker build -t notification-service:latest ./notification-service
        docker build -t frontend:latest ./frontend

    - name: Run Trivy vulnerability scanner on API Gateway
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'api-gateway:latest'
        format: 'sarif'
        output: 'trivy-results-api-gateway.sarif'

    - name: Run Trivy vulnerability scanner on User Service
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'user-service:latest'
        format: 'sarif'
        output: 'trivy-results-user-service.sarif'

    - name: Run Trivy vulnerability scanner on Order Service
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'order-service:latest'
        format: 'sarif'
        output: 'trivy-results-order-service.sarif'

    - name: Run Trivy vulnerability scanner on Inventory Service
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'inventory-service:latest'
        format: 'sarif'
        output: 'trivy-results-inventory-service.sarif'

    - name: Run Trivy vulnerability scanner on Notification Service
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'notification-service:latest'
        format: 'sarif'
        output: 'trivy-results-notification-service.sarif'

    - name: Run Trivy vulnerability scanner on Frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'frontend:latest'
        format: 'sarif'
        output: 'trivy-results-frontend.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-*.sarif'

  # CI/CD Deployment Phase
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [security-scan, container-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-

    - name: Build and push API Gateway image
      uses: docker/build-push-action@v5
      with:
        context: ./api-gateway
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push User Service image
      uses: docker/build-push-action@v5
      with:
        context: ./user-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/user-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Order Service image
      uses: docker/build-push-action@v5
      with:
        context: ./order-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/order-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Inventory Service image
      uses: docker/build-push-action@v5
      with:
        context: ./inventory-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/inventory-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Notification Service image
      uses: docker/build-push-action@v5
      with:
        context: ./notification-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/notification-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_DATA }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Deploy to Kubernetes
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|image: .*/api-gateway:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${{ github.sha }}|g" k8s/api-gateway-deployment.yaml
        sed -i "s|image: .*/user-service:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/user-service:${{ github.sha }}|g" k8s/user-service-deployment.yaml
        sed -i "s|image: .*/order-service:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/order-service:${{ github.sha }}|g" k8s/order-service-deployment.yaml
        sed -i "s|image: .*/inventory-service:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/inventory-service:${{ github.sha }}|g" k8s/inventory-service-deployment.yaml
        sed -i "s|image: .*/notification-service:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/notification-service:${{ github.sha }}|g" k8s/notification-service-deployment.yaml
        sed -i "s|image: .*/frontend:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}|g" k8s/frontend-deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/rabbitmq-deployment.yaml
        kubectl apply -f k8s/rabbitmq-service.yaml
        kubectl apply -f k8s/api-gateway-deployment.yaml
        kubectl apply -f k8s/api-gateway-service.yaml
        kubectl apply -f k8s/user-service-deployment.yaml
        kubectl apply -f k8s/user-service-service.yaml
        kubectl apply -f k8s/order-service-deployment.yaml
        kubectl apply -f k8s/order-service-service.yaml
        kubectl apply -f k8s/inventory-service-deployment.yaml
        kubectl apply -f k8s/inventory-service-service.yaml
        kubectl apply -f k8s/notification-service-deployment.yaml
        kubectl apply -f k8s/notification-service-service.yaml
        kubectl apply -f k8s/frontend-deployment.yaml
        kubectl apply -f k8s/frontend-service.yaml
        kubectl apply -f k8s/ingress.yaml
        kubectl apply -f k8s/network-policy.yaml

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/api-gateway -n shopping-app --timeout=300s
        kubectl rollout status deployment/user-service -n shopping-app --timeout=300s
        kubectl rollout status deployment/order-service -n shopping-app --timeout=300s
        kubectl rollout status deployment/inventory-service -n shopping-app --timeout=300s
        kubectl rollout status deployment/notification-service -n shopping-app --timeout=300s
        kubectl rollout status deployment/frontend -n shopping-app --timeout=300s

    - name: Get deployment status
      run: |
        kubectl get pods -n shopping-app
        kubectl get services -n shopping-app
