name: DevSecOps Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-and-quality

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies (api-gateway)
      run: cd api-gateway && npm ci
    - name: Install dependencies (user-service)
      run: cd user-service && npm ci
    - name: Install dependencies (order-service)
      run: cd order-service && npm ci
    - name: Install dependencies (inventory-service)
      run: cd inventory-service && npm ci
    - name: Install dependencies (notification-service)
      run: cd notification-service && npm ci
    - name: Install dependencies (frontend)
      run: cd frontend && npm ci

    - name: Dependency scan (api-gateway)
      run: cd api-gateway && npm audit --audit-level=high
    - name: Dependency scan (user-service)
      run: cd user-service && npm audit --audit-level=high
    - name: Dependency scan (order-service)
      run: cd order-service && npm audit --audit-level=high
    - name: Dependency scan (inventory-service)
      run: cd inventory-service && npm audit --audit-level=high
    - name: Dependency scan (notification-service)
      run: cd notification-service && npm audit --audit-level=high
    - name: Dependency scan (frontend)
      run: cd frontend && npm audit --audit-level=high

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build images
      run: |
        docker build -t api-gateway:latest ./api-gateway
        docker build -t user-service:latest ./user-service
        docker build -t order-service:latest ./order-service
        docker build -t inventory-service:latest ./inventory-service
        docker build -t notification-service:latest ./notification-service
        docker build -t frontend:latest ./frontend

    - name: Trivy scan (api-gateway)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: api-gateway:latest
        format: sarif
        output: trivy-results-api-gateway.sarif
    - name: Trivy scan (user-service)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: user-service:latest
        format: sarif
        output: trivy-results-user-service.sarif
    - name: Trivy scan (order-service)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: order-service:latest
        format: sarif
        output: trivy-results-order-service.sarif
    - name: Trivy scan (inventory-service)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: inventory-service:latest
        format: sarif
        output: trivy-results-inventory-service.sarif
    - name: Trivy scan (notification-service)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: notification-service:latest
        format: sarif
        output: trivy-results-notification-service.sarif
    - name: Trivy scan (frontend)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: frontend:latest
        format: sarif
        output: trivy-results-frontend.sarif

    - name: Upload Trivy SARIF results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trivy-results-*.sarif

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [security-scan, container-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push (api-gateway)
      uses: docker/build-push-action@v5
      with:
        context: ./api-gateway
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${{ github.sha }}
    - name: Build and push (user-service)
      uses: docker/build-push-action@v5
      with:
        context: ./user-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/user-service:${{ github.sha }}
    - name: Build and push (order-service)
      uses: docker/build-push-action@v5
      with:
        context: ./order-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/order-service:${{ github.sha }}
    - name: Build and push (inventory-service)
      uses: docker/build-push-action@v5
      with:
        context: ./inventory-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/inventory-service:${{ github.sha }}
    - name: Build and push (notification-service)
      uses: docker/build-push-action@v5
      with:
        context: ./notification-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/notification-service:${{ github.sha }}
    - name: Build and push (frontend)
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: latest

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_DATA }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f k8s/namespace.yaml
        for f in k8s/*.yaml; do echo Applying $f; kubectl apply -f $f; done

    - name: Verify rollout
      run: |
        kubectl rollout status deployment/api-gateway -n shopping-app --timeout=300s
        kubectl rollout status deployment/user-service -n shopping-app --timeout=300s
        kubectl rollout status deployment/order-service -n shopping-app --timeout=300s
        kubectl rollout status deployment/inventory-service -n shopping-app --timeout=300s
        kubectl rollout status deployment/notification-service -n shopping-app --timeout=300s
        kubectl rollout status deployment/frontend -n shopping-app --timeout=300s


